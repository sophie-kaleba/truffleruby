<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    Checkstyle-Configuration: Checks
    Description: none
-->
<module name="Checker">
  <property name="severity" value="error"/>
  <module name="TreeWalker">
    <module name="AvoidStarImport">
      <property name="allowClassImports" value="false"/>
      <property name="allowStaticMemberImports" value="false"/>
    </module>
    <property name="tabWidth" value="4"/>
    <module name="FileContentsHolder"/>
    <!--<module name="JavadocStyle">-->
      <!--<property name="checkHtml" value="false"/>-->
    <!--</module>-->
    <!--<module name="LocalFinalVariableName"/>-->
    <!--<module name="LocalVariableName"/>-->
    <!--<module name="MemberName">-->
      <!--<property name="format" value="^(([a-z][a-zA-Z0-9]*$)|(_[A-Z][a-zA-Z0-9]*_[a-z][a-zA-Z0-9]*$))"/>-->
    <!--</module>-->
    <!--<module name="MethodName">-->
      <!--<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>-->
    <!--</module>-->
    <module name="PackageName"/>
    <!--<module name="ParameterName"/>-->
    <module name="TypeName">
      <property name="format" value="^[A-Z][_a-zA-Z0-9]*$"/>
    </module>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>
    <!--<module name="LineLength">-->
      <!--<property name="max" value="250"/>-->
    <!--</module>-->
    <module name="MethodParamPad"/>
    <module name="NoWhitespaceAfter">
      <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
    </module>
    <module name="NoWhitespaceBefore">
      <property name="tokens" value="SEMI,POST_DEC,POST_INC"/>
    </module>
    <module name="ParenPad"/>
    <module name="TypecastParenPad">
      <property name="tokens" value="RPAREN,TYPECAST"/>
    </module>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround">
      <property name="tokens" value="ASSIGN,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV,DIV_ASSIGN,EQUAL,GE,GT,LAND,LE,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,LT,MINUS,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN,LITERAL_ASSERT,TYPE_EXTENSION_AND"/>
    </module>
    <!--<module name="RedundantModifier"/>-->
    <!--<module name="AvoidNestedBlocks">-->
      <!--<property name="allowInSwitchCase" value="true"/>-->
    <!--</module>-->
    <!--<module name="EmptyBlock">-->
      <!--<property name="option" value="text"/>-->
      <!--<property name="tokens" value="LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_IF,LITERAL_TRY,LITERAL_WHILE,STATIC_INIT"/>-->
    <!--</module>-->
    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>
    <module name="EmptyStatement"/>
    <module name="HiddenField">
      <property name="severity" value="ignore"/>
      <property name="ignoreConstructorParameter" value="true"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <!--<module name="FinalClass"/>-->
    <module name="HideUtilityClassConstructor">
      <property name="severity" value="ignore"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <!--<module name="ArrayTypeStyle"/>-->
    <module name="UpperEll"/>
    <!--<module name="FallThrough"/>-->
    <module name="FinalLocalVariable">
      <property name="severity" value="ignore"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <!--<module name="MultipleVariableDeclarations"/>-->
    <!--<module name="StringLiteralEquality">-->
      <!--<property name="severity" value="error"/>-->
    <!--</module>-->
    <module name="SuperFinalize"/>
    <module name="UnnecessaryParentheses">
      <property name="severity" value="ignore"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <module name="Indentation">
      <property name="severity" value="ignore"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <!--<module name="StaticVariableName">-->
      <!--<property name="format" value="^[A-Za-z][a-zA-Z0-9]*$"/>-->
    <!--</module>-->
    <module name="EmptyForInitializerPad"/>
    <module name="EmptyForIteratorPad"/>
    <module name="ModifierOrder"/>
    <!--<module name="DefaultComesLast"/>-->
    <module name="InnerAssignment">
      <property name="severity" value="ignore"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <!--<module name="ModifiedControlVariable"/>-->
    <module name="MutableException">
      <property name="severity" value="ignore"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <module name="ParameterAssignment">
      <property name="severity" value="ignore"/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <!--<module name="RegexpSinglelineJava">-->
      <!--<metadata name="net.sf.eclipsecs.core.comment" value="Illegal trailing whitespace(s) at the end of the line."/>-->
      <!--<property name="format" value="\s$"/>-->
      <!--<property name="message" value="Illegal trailing whitespace(s) at the end of the line."/>-->
      <!--<property name="ignoreComments" value="true"/>-->
      <!--<metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Checks for trailing spaces at the end of a line"/>-->
    <!--</module>-->
    <!--<module name="RegexpSinglelineJava">-->
      <!--<metadata name="net.sf.eclipsecs.core.comment" value="illegal space before a comma"/>-->
      <!--<property name="format" value=" ,"/>-->
      <!--<property name="message" value="illegal space before a comma"/>-->
      <!--<property name="ignoreComments" value="true"/>-->
      <!--<metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Checks for whitespace before a comma."/>-->
      <!--<metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Illegal whitespace before a comma."/>-->
    <!--</module>-->
    <module name="RegexpSinglelineJava">
      <property name="format" value="[^\x00-\x7F]"/>
      <property name="message" value="Only use ASCII characters."/>
    </module>
     <module name="RegexpSinglelineJava">
      <property name="format" value="new (Hashtable|Vector|Stack|StringBuffer)[^\w]"/>
      <property name="message" value="Don't use old synchronized collection classes"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="CompilerDirectives.transferToInterpreter\(\)"/>
      <property name="message" value="Use a BranchProfile or transferToInterpreterAndInvalidate() instead, which allows moving code around the transfer."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="CompilerAsserts.neverPartOfCompilation\(\)"/>
      <property name="message" value="Pass a String argument explaining what to use instead in PE code."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value=",\s*@Cached"/>
      <property name="message" value="@Cached arguments should be on their own line"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="\.computeIfAbsent"/>
      <property name="message" value="Use ConcurrentOperations.getOrCompute() instead of ConcurrentHashMap.computeIfAbsent() which does not scale"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="@NodeChildren"/>
      <property name="message" value="Do not use @NodeChildren, use multiple @Child annotations directly"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="@NodeChild\(type"/>
      <property name="message" value="Use @NodeChild(value = ..., type = ...) for consistency"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="executeWith\s*="/>
      <property name="message" value="Do not use executeWith, it is unclear"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="getRuntime\(\)\.getCurrentFrame\(\)"/>
      <property name="message" value="Use CallStackManager#getCurrentFrame() instead. FrameInstance should never be returned."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="getRuntime\(\)\.getCallerFrame\(\)"/>
      <property name="message" value="Use CallStackManager methods instead. FrameInstance should never be returned."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='@Cached\("create\(\)"\)'/>
      <property name="message" value='Replace @Cached("create()") with @Cached.'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='@Cached\.'/>
      <property name="message" value='Use a nested import instead.'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='@CompilerDirectives\.TruffleBoundary'/>
      <property name="message" value='Use @TruffleBoundary instead.'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='TruffleLanguage\.ContextReference&lt;'/>
      <property name="message" value='Use ContextReference instead.'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='\.getBytes\(StandardCharsets\.US_ASCII\)'/>
      <property name="message" value='Use StringOperations.encodeAsciiBytes() instead.'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='\.toArray\(new \w+\[\w+\.size\(\)\]\)'/>
      <property name="message" value='Use toArray(new Type[0]) instead.'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='new\s+\w+\[\]\s*\{\s*\}'/>
      <property name="message" value='Use new Type[0] instead.'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='(?!=)\S\s*new\s+\w+\[0\]'/>
      <property name="message" value='Use a EMPTY_type_ARRAY constant instead.'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value="transferToInterpreterOnException"/>
      <property name="message" value="Don't use transferToInterpreterOnException"/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='"isRuby(?!Value|DynamicObject|SymbolOrString|Rational|Range|[^"]+\|\|)\w+\(\w+\)'/> <!-- Rational is not a builtin type -->
      <property name="message" value="Type the argument instead of using a positive isRuby* guard."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='"isNil'/>
      <property name="message" value="Type the argument as Nil instead of using a positive isNil() guard."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='@CachedLibrary\(".+\.store"\) ArrayStoreLibrary'/>
      <property name="message" value="Bind array stores to avoid races between threads causing dispatch errors."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='@Cached\("createBinaryProfile\(\)"\) ConditionProfile'/>
      <property name="message" value="Use @Cached ConditionProfile instead."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='@Cached\("createCountingProfile\(\)"\) LoopConditionProfile'/>
      <property name="message" value="Use @Cached LoopConditionProfile instead."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='Collections\.newSetFromMap\(new ConcurrentHashMap'/>
      <property name="message" value="Use ConcurrentHashMap.newKeySet() instead."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='LoopNode\.reportLoopCount\('/>
      <property name="message" value="Use profileAndReportLoopCount() instead."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='\.profileCounted\('/>
      <property name="message" value="Use profileAndReportLoopCount() instead."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='Double\.compare'/>
      <property name="message" value="Double.compare() does not match Ruby semantics, use FloatNodes.CompareNode.compareDoubles instead."/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='GetCodeRangeNode'/>
      <property name="message" value='Use GetByteCodeRangeNode instead.'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='@Cached.+AbstractTruffleString'/>
      <property name="message" value='Do not cache on AbstractTruffleString (which can be mutable), cache on TruffleString and use RubyStringLibrary#asTruffleStringUncached()'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='serialVersionUID'/>
      <property name="message" value='Use @SuppressWarnings("serial") instead.'/>
    </module>
    <module name="RegexpSinglelineJava">
      <property name="format" value='isNativeAccessAllowed\(\)'/>
      <property name="message" value='Use context.getOptions().NATIVE_PLATFORM instead.'/>
    </module>
    <module name="IllegalType">
      <!-- Use PrintStream instead of PrintWriter, PrintWriter does not consistently flush, even when writing \n.-->
      <property name="illegalClassNames" value="TruffleObject,DynamicObject,PrintWriter"/>
    </module>
  </module>
  <module name="RegexpMultiline">
    <property name="format" value='Node currentNode,\s*RubyContext context'/>
    <property name="message" value='Pass context first: RubyContext context, Node currentNode'/>
  </module>
  <module name="RegexpMultiline">
    <property name="format" value="\r\n"/>
    <property name="message" value="illegal Windows line ending"/>
  </module>
  <module name="RegexpMultiline">
    <property name="format" value="CompilerDirectives\.transferToInterpreterAndInvalidate\(\);\s+\w+Node\s+=\s+(?!insert\()"/>
    <property name="message" value="Lazily initialized child nodes must be explicitly inserted into the AST."/>
  </module>
  <module name="RegexpMultiline">
    <property name="format" value="CompilerDirectives\.transferToInterpreterAndInvalidate\(\);\s+\w+\s+=\s+(?!insert\()\w+\.create\("/>
    <property name="message" value="Lazily initialized child nodes must be explicitly inserted into the AST."/>
  </module>
  <module name="RegexpHeader">
    <property name="header" value='/\*\n (\* Copyright \(c\) (20[0-9][0-9], )?20[0-9][0-9] Oracle and/or its affiliates\. All rights reserved\. This|\*\*\*\*\* BEGIN LICENSE BLOCK \*\*\*\*\*)\n (\* code is released under a tri EPL/GPL/LGPL license\. You can use it,|\* Version: EPL 2\.0/GPL 2\.0/LGPL 2\.1)\n (\* redistribute it and/or modify it under the terms of the:|\*)\n (\*|\* The contents of this file are subject to the Eclipse Public)\n (\* Eclipse Public License version 2\.0|\* License Version 2\.0 \(the "License"\); you may not use this file)\n (\* GNU General Public License version 2|\* except in compliance with the License\. You may obtain a copy of)\n (\* GNU Lesser General Public License version 2\.1|\* the License at http://www.eclipse.org/legal/epl-v20.html)\n (\*/|\*)\n'/>
    <property name="fileExtensions" value="java"/>
  </module>
  <module name="FileTabCharacter">
    <property name="severity" value="error"/>
  </module>
  <module name="NewlineAtEndOfFile">
    <property name="lineSeparator" value="lf"/>
  </module>
  <module name="Translation"/>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="Checkstyle: stop constant name check"/>
    <property name="onCommentFormat" value="Checkstyle: resume constant name check"/>
    <property name="checkFormat" value="ConstantNameCheck"/>
    <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Allow non-conforming constant names"/>
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="Checkstyle: stop method name check"/>
    <property name="onCommentFormat" value="Checkstyle: resume method name check"/>
    <property name="checkFormat" value="MethodName"/>
    <property name="checkC" value="false"/>
    <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Disable method name checks"/>
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="CheckStyle: stop parameter assignment check"/>
    <property name="onCommentFormat" value="CheckStyle: resume parameter assignment check"/>
    <property name="checkFormat" value="ParameterAssignment"/>
    <property name="checkC" value="false"/>
    <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Disable Parameter Assignment"/>
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="Checkstyle: stop final variable check"/>
    <property name="onCommentFormat" value="Checkstyle: resume final variable check"/>
    <property name="checkFormat" value="FinalLocalVariable"/>
    <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Disable final variable checks"/>
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="Checkstyle: stop"/>
    <property name="onCommentFormat" value="Checkstyle: resume"/>
    <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Disable all checks"/>
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="CheckStyle: stop inner assignment check"/>
    <property name="onCommentFormat" value="CheckStyle: resume inner assignment check"/>
    <property name="checkFormat" value="InnerAssignment"/>
    <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Disable inner assignment checks"/>
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="Checkstyle: stop field name check"/>
    <property name="onCommentFormat" value="Checkstyle: resume field name check"/>
    <property name="checkFormat" value="MemberName"/>
    <property name="checkC" value="false"/>
    <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Disable field name checks"/>
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="CheckStyle: stop system..print check"/>
    <property name="onCommentFormat" value="CheckStyle: resume system..print check"/>
    <property name="checkFormat" value="RegexpSingleline"/>
    <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Disable System.(out|err).print checks"/>
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="CheckStyle: stop header check"/>
    <property name="onCommentFormat" value="CheckStyle: resume header check"/>
    <property name="checkFormat" value=".*Header"/>
    <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Disable header checks"/>
  </module>
  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="CheckStyle: start generated"/>
    <property name="onCommentFormat" value="CheckStyle: stop generated"/>
  </module>
  <!--<module name="RegexpSingleline">-->
    <!--<property name="format" value="System\.(out|err)\.print"/>-->
  <!--</module>-->
</module>
