# -*- mode: yaml -*-
# Config file for ReBench
default_experiment: benchmarks
default_data_file: 'splitting-benchmark.data'

reporting:
    # Benchmark results will be reported to ReBenchDB
    rebenchdb:
        # this url needs to point to the API endpoint
        db_url: http://www.topistuff.ovh/rebenchdb
        repo_url: https://github.com/sophie-kaleba/truffleruby
        record_all: true # make sure everything is recorded
        project_name: TruffleRuby


# definition of benchmark suites
benchmark_suites:  
    ruby-benchs-steady:
        gauge_adapter: RebenchLog
        # gauge_adapter:
            # SplittingStatsAdapter: ./splitting_stats_adapter.py
        location: .
        command: &HARNESS_CMD "%(variable)s ./phd-bench/phase/harness-full.rb %(benchmark)s %(iterations)s"
        iterations: 150
        invocations: 1
        max_invocation_time: 3024000
        benchmarks: 
            - Acid: {extra_args:  5000, iterations: 3000, tags: [yuria2 ]}       
            - AsciidoctorConvertSmall: {extra_args:  100, iterations: 300, tags: [yuria3 ]} #startup
            - AsciidoctorLoadFileSmall: {extra_args:  100, iterations: 300, tags: [yuria ]} #startup
            - BinaryTrees: {extra_args:  1, tags: [yuria2 ]} 
            - ImageDemoConv: {extra_args:  30, tags: [yuria3 ]}  
            - ImageDemoSobel: {extra_args:  1, tags: [yuria ]}  
            - LiquidCartParse: {extra_args:  300, tags: [yuria2 ]} #startup      
            - LiquidCartRender: {extra_args:  900, tags: [yuria3 ]} #startup       
            - LiquidMiddleware: {extra_args:  12000, tags: [yuria ]} #startup
            - LiquidParseAll: {extra_args:  900, tags: [yuria2 ]} #startup
            - LiquidRenderBibs: {extra_args:  900, tags: [yuria3 ]} #startup
            - MatrixMultiply: {extra_args:  200, tags: [yuria2 ]}       
            - OptCarrot: {extra_args:  100, tags: [yuria3 ]}
            - Pidigits: {extra_args:  2, iterations: 20, tags: [yuria ]}
            - RedBlack: {extra_args:  5, iterations: 200, tags: [yuria2 ]} #startup
            - SinatraHello: {extra_args:  2000, iterations: 250, tags: [yuria3 ]} #startup


    game-benchs-steady:
        gauge_adapter: RebenchLog
        # gauge_adapter:
            # SplittingStatsAdapter: ./splitting_stats_adapter.py
        location: .
        command: *HARNESS_CMD
        iterations: 300
        invocations: 1
        max_invocation_time: 3024000
        benchmarks: 
            - Bounce: {extra_args:  2000, tags: [yuria ]}
            - CD: {extra_args:  100, tags: [yuria2 ]}
            - DeltaBlue: {extra_args:  9000, iterations: 400, tags: [yuria3 ]} #startup
            - Json: {extra_args:  120, tags: [yuria ]}
            - List: {extra_args:  500, tags: [yuria3 ]}
            - Mandelbrot: {extra_args:  500, tags: [yuria2 ]}
            - NBody: {extra_args:  250000, tags: [yuria ]}
            - NeuralNet: {extra_args:  1, iterations: 15, tags: [yuria3 ]}
            - Permute: {extra_args:  500, tags: [yuria2 ]}
            - Queens: {extra_args:  300, tags: [yuria ]}
            - Richards: {extra_args:  15, tags: [yuria2 ]}
            - Sieve: {extra_args:  5000, tags: [yuria3 ]}
            - SpectralNorm: {extra_args:  1, tags: [yuria2 ]}
            - Storage: {extra_args:  300, tags: [yuria3 ]}
            - Towers: {extra_args:  200, tags: [yuria ]}

    startup-exp:
        gauge_adapter: RebenchLog
        # gauge_adapter:
            # SplittingStatsAdapter: ./splitting_stats_adapter.py
        location: .
        command: *HARNESS_CMD
        iterations: 300
        invocations: 1
        max_invocation_time: 3024000
        benchmarks: 
            - LeeBench: {extra_args:  300, iterations: 100, tags: [yuria2 ]} #startup
            - FannkuchRedux: {extra_args:    1, iterations: 30, tags: [yuria ]}
            - RubykonBench: {extra_args:  1, iterations: 20, tags: [yuria2 ]} #startup
            - BlogRailsRoutes: {extra_args: 1, iterations: 20, tags: [yuria ]} #startup
            - BlogRailsRoutesTwoRoutesTwoRequests: {extra_args: 1, iterations: 20,  tags: [yuria ]} #startup
            - ERubiRails: {extra_args: 1, iterations: 20, tags: [yuria2 ]} #startup
            - MailBench: {extra_args: 1, iterations: 40, tags: [yuria3 ]} #startup
            - PsychLoad: {extra_args: 1, iterations: 40, tags: [yuria ]} #startup
            - HexaPdfSmall: {iterations: 40, tags: [yuria2 ], extra_args:  1} #it gets stuck when we handle mispredicts # startup
            - Havlak: {extra_args:  1, iterations: 300, tags: [yuria3], variable_values: ["--vm.Xss5m"]}

executors:
    TruffleRuby-ce:
        path: /tmp/truffleruby/truffleruby-jvm-ce/bin
        executable: truffleruby
        args: "--experimental-options --vm.Dpolyglot.engine.TraceSplittingSummary=false --vm.Dpolyglot.engine.CompilationStatistics=false --vm.Dpolyglot.engine.DynamicCompilationThresholds=false --vm.XX:-UseJVMCINativeLibrary --engine.BackgroundCompilation=false --vm.Dpolyglot.log.file='tmplog'"

    TruffleRuby-ce-large-cache:
        path: /tmp/truffleruby/truffleruby-jvm-ce/bin
        executable: truffleruby
        args: "--experimental-options --vm.XX:ReservedCodeCacheSize=512m --vm.XX:NonProfiledCodeHeapSize=500m --vm.Dpolyglot.engine.TraceSplittingSummary=false --vm.Dpolyglot.engine.CompilationStatistics=false --vm.Dpolyglot.engine.DynamicCompilationThresholds=false --vm.XX:-UseJVMCINativeLibrary --engine.BackgroundCompilation=false --vm.Dpolyglot.log.file='tmplog'"

    TruffleRuby-ce-native:
        path: /tmp/truffleruby/truffleruby-native-libgraal/bin
        executable: truffleruby
        args: "--experimental-options --vm.Dpolyglot.engine.TraceSplittingSummary=true --vm.Dpolyglot.engine.CompilationStatistics=true --vm.XX:-UseJVMCINativeLibrary --engine.BackgroundCompilation=false --vm.Dpolyglot.log.file='tmplog'"

    TruffleRuby-ce-interp:
        path: /tmp/truffleruby/truffleruby-native-libgraal/bin
        executable: truffleruby
        args: "--experimental-options --engine.Compilation=false --vm.XX:-UseJVMCINativeLibrary --engine.BackgroundCompilation=false --vm.Dpolyglot.engine.TraceSplittingSummary=false --vm.Dpolyglot.log.file='tmplog'"

    No-Splitting-TruffleRuby-ce:
        path: /tmp/truffleruby/truffleruby-jvm-ce/bin
        executable: truffleruby
        args: "--experimental-options --vm.Dpolyglot.engine.TraceSplittingSummary=false --vm.Dpolyglot.engine.CompilationStatistics=false --vm.Dpolyglot.engine.DynamicCompilationThresholds=false --vm.XX:-UseJVMCINativeLibrary --engine.BackgroundCompilation=false --vm.Dpolyglot.engine.Splitting=false --vm.Dpolyglot.log.file='tmplog'"

    No-Splitting-TruffleRuby-ce-large-cache:
        path: /tmp/truffleruby/truffleruby-jvm-ce/bin
        executable: truffleruby
        args: "--experimental-options --vm.XX:ReservedCodeCacheSize=512m --vm.XX:NonProfiledCodeHeapSize=500m --vm.Dpolyglot.engine.TraceSplittingSummary=false --vm.Dpolyglot.engine.CompilationStatistics=false --vm.Dpolyglot.engine.DynamicCompilationThresholds=false --vm.XX:-UseJVMCINativeLibrary --engine.BackgroundCompilation=false --vm.Dpolyglot.engine.Splitting=false --vm.Dpolyglot.log.file='tmplog'"

    No-Splitting-TruffleRuby-ce-native:
        path: /tmp/truffleruby/truffleruby-native-libgraal/bin
        executable: truffleruby
        args: "--experimental-options --vm.Dpolyglot.engine.TraceSplittingSummary=false --vm.XX:-UseJVMCINativeLibrary --engine.BackgroundCompilation=false --vm.Dpolyglot.engine.Splitting=false --vm.Dpolyglot.log.file='tmplog'"

    No-Splitting-TruffleRuby-ce-interp:
        path: /tmp/truffleruby/truffleruby-native-libgraal/bin
        executable: truffleruby
        args: "--experimental-options --engine.Compilation=false --vm.XX:-UseJVMCINativeLibrary --engine.BackgroundCompilation=false --vm.Dpolyglot.engine.TraceSplittingSummary=false --vm.Dpolyglot.engine.Splitting=false --vm.Dpolyglot.log.file='tmplog'"

experiments:    
    benchmarks:
        description: All benchmarks
        executions:
            - TruffleRuby-ce-large-cache:
                suites:
                    - startup-exp
                    - ruby-benchs-steady
                    - game-benchs-steady
            

